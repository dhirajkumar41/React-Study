function hookCounterOne(){
  const [name , setName] = useState('')
  const [count , setCount] =  useState('');
  
  useEffect(()=>{
    document.title= $(count)
  });

  
  return(
    <div>
      <input type = 'text' value = {name} onChange = { e=> setName(e.target.value)}>
      </div>
      <button Onclick = {() =>setCount(count+1)}>click {count}</button>
  );
}

Run effects only once =>
function hookMouse(){
  const [x,setX]= useState(0);
  const[y,setY]= useState(0);
  useEffect(e =>{
    window.addEventListner('MouseMove',logMousePosition)
  },[])
  const logMousePosition = e =>{
    setx(e.clientX)
    sety(e.clientY)
  }
  return(
    <div>
      hook x={x} y= {y}
      </div>
  )
}
useEffect with cleanup =>
function hookMouse(){
  const [x,setX]= useState(0);
  const[y,setY]= useState(0);
  const[display, setDisply] = useState(0);
  useEffect(e =>{
    window.addEventListner('MouseMove',logMousePosition)
  }
 window.removeEventListener(--)
            ,[])
  const logMousePosition = e =>{
    setx(e.clientX)
    sety(e.clientY)
  }
  return(
    <div>
      <button onClick = {()=>setDisplay(!display)}>toggleDisplay</button>
      hook x={x} y= {y}
      </div>
  )
}
useEffect with incorrect dependency => for prevount we don't need to pass the count in array in function useEffect
function intervalDependency(){
  const [count, setCount] = usestate(0)
  const tick = () => {
    setcount(count+1)
  }
  usEffect = () =>{
    const interval= setInterval (tick,1000)
    return (
      clearInterval(interval)
    )
  },[count]
  }
  return(){
    <div>
      {count}
      </div>
  }
}Fetching data with useEffect Part 1 =>
function DataFetching(){
  const[posts, setPosts]= useState(0);
  useEffect = () => {
    axios.get('url')
    .then(res =>
          {
      setPost(res.data)
    }
         )
    .catch(err =>{
      console.log('error')
    },[])
  }
  return(
    <div>
      <ul>{
          posts.map(post =>
                    (
            <li key = {post.id}>{post.item}</li>
          ))
        }
      </ul>
    </div>
  )
}

 Fetching data with useEffect Part 2 for particular id =>
function DataFetching(){
  const[post, setPost]= useState(0);
  const [id, setId]=useState(1);
  useEffect = () => {
    axios.get('url/${id}')
    .then(res =>
          {
      setPost(res.data)
    }
         )
    .catch(err =>{
      console.log('error')
    },[id])
  }
  return(
    <div>
      <input type= 'text' value ={id} onChnage = {e => setId(e.target.value)}/>
      {post.item}
    </div>
  )
}

 Fetching data with useEffect Part 3 => on click button
 function DataFetching(){
  const[post, setPost]= useState(0);
  const [id, setId]=useState(1);
  const [idFromButtonClick, setIdFromButtonClick]=useState(1);
  useEffect = () => {
    axios.get('url/{idFromButtonClick}')
    .then(res =>
          {
      setPost(res.data)
    }
         )
    .catch(err =>{
      console.log('error')
    },[idFromButtonClick])
  }
  handlerClick(){
    setIdFromButtonClick(id)
  }
  return(
    <div>
      <input type= 'text' value ={id} onChnage = {e => setId(e.target.value)}/>
      <button type="button" onClick ={handlerClick}>click</button>
      {post.item}
    </div>
  )
}
Context=>

export const userContext = React.createContext();
export const channelContext = React.createContext();
function App(){
  return(
    <div>
      <userContext.provider value = {'vishwas'}>
        <channelContext.provider value = {'vishwas'}>
          
        <componentC/>
          <channelContext.provider/>
     <userContext.provider/>     
    </div>
  )
}
componentC(){
  return(
    <div>
        <componentE/>     
    </div>
  )
}
componentE(){
  return(
    <div>
        <componentF/>     
    </div>
  )
}
componentF(){
        return(
        <div>
            <userContext.consumer>
              {
                user =>{
                  channel =>{
                     return {user} {channel}
                  }
                 
                }
              }
             </userContext.consumer> 
          </div>
            )
      }      
      
	  2.=>
	  export const userContext = React.createContext();
export const channelContext = React.createContext();
function App(){
  return(
    <div>
      <userContext.provider value = {'vishwas'}>
        <channelContext.provider value = {'vishwas'}>
          
        <componentC/>
          <channelContext.provider/>
     <userContext.provider/>     
    </div>
  )
}
componentC(){
  return(
    <div>
        <componentE/>     
    </div>
  )
}
import {userContext, channelContext} from '../APP'
componentE(){
  const user =useContext(userContext)        
  return(
    <div>
        {user}     
    </div>
  )
}
componentF(){
        return(
        <div>
            <userContext.consumer>
              {
                user =>{
                  channel =>{
                     return {user} {channel}
                  }
                 
                }
              }
             </userContext.consumer> 
          </div>
            )
      }      
      useReducer (simple state & action) =>
	  const initialState = 0;
const reducer = (state,action) =>{
  switch(action){
    case 'increment':
      return state+1;
    case 'decrement':
      return state - 1;
    case 'reset':
      return initialState;
    default:
      return state
  }
}
function CountOne(){
  const [count, dispatch] = 
        useReducer(reducer, initialState);
  return(
    <div>
      <h1>{count}</div>
      <button type='button' onClick = {dispatch('increment')}>Increment</button>
    </div>
  )
}

Multiple useReducers =>
const initialState = ;
const Reducer =(state, action)=>{
  switch(ation)
    case 'increment':
    return state+1
    case 'decrement':
    return state-1
    case 'reset':
    return initialState
    defaulf:
    return 0
}
function App(){
  export const countContext = React.createContext();  
  const [count, dispatch] = useReducer(Reducer, initialState);
  return(
    <countContext.provider value=({countState:count, countDisatch:dispatch})>
    <div>{count}
    <ComponentA />
      </div>
      </countContext.provider>
  )
}
function A(){
  const countContext = useContext(countContext)
  return(
    <div><button onClick = () =>countContext.countDispatch('increment')>Increment</button></div>
  )
}  

Fetching data with useReducer part 1 =>
function fetchData(){
  const[loading, setloading]=useState(true)
  const[error,seterror]=useState('')
  const[post,setpost]=useState({})
  useEffect(()=>{
    axios.get('url')
    .then(reponse =>{
      setloading('false')
      setpost(reponse.data)
      seterror('')
    })
    .catch(error=>{
      setloading('false')
      setpost({})
      seterror('error')
    })
  },[])
  return(
    <div>
      {loading?loading:post.title}
    </div>
  )
}
Fetching data with useReducer part 2=> with useReducer
const initialState = {
  loading: true;
  error:'';
  post: {};
}
const reducer = (state, action) =>{
  switch(action.type)
    case('success')
    return{
      loading: 'true'
      post: action:payload
      error: ''
    }
    case('error')
    return{
      loading: 'true'
      post: ''
      error: 'something went wrong'
    }
}
function fetchData(){
  const [state,dispatch] = useReducer(reducer, initialState)
  useEffect(()=>{
    axios.get('url')
    .then(reponse =>{
      dispatch({type:success,payload:response.data})
    })
    .catch(error=>{
      dispatch({type:error})
    })
  },[])
  return(
    <div>
      {state.loading?state.loading.title}
    </div>
  )
}
usecallback hook=
function ParentComponent(){
  const [age, setage]= useState(25);
  incrementage=usecallback(()=>{
    setage(age*10)
  },[age])
  return(
    <count type = age count={age}/>
    <button handleClick={incrementage}/>
  )
}
function count({text,count}){
  return <div>{text}{count}</div>
}
export default React.memo(count)


useMemo =>
function Counter(){
  const[countone, setcountone]=useState(0);
  const[counttwo, setcounttwo]=useState(0)
  const incrementOne = () => {
    setcounterone(countone+1)    
  }
   const incrementtwo = () => {
    setcountertwo(counttwo+1)    
  }
   const isEven = useMemo(
     ()=>{
     let i=0
     while(i<20000000)i++
       return counterOne % 2===0
   },[counterOne]
   )
   return(
     <div>
       <button onClick={incrementOne}>{counterone}</button>
       <span>{isEven?'Even':'Odd'}</span>
       </div>
   )
}
useRef Hook =>
function Reftimer(){
  const[timer, settimer] = useState(0);
  const intervalRef = useRef();
  const intervalRef = setInterval(()=>{
    settimer(prevtimer=>prevtimer+1)
  },1000)
  return()=>{
    clearInterval(intervalRef)
  }
  return(
    <div>
      <button onClick=()=>clearInterval(intervalRef)>clear</button>
    </div>
  )
}

useDocumentTitle Custom Hook=>

function useInput(initialState){
  const[value,setvalue] = useState(initialState);
  const reset = () =>{
    setvalue(initialState)
  }
  const bind ={
    value,
    onChange = e =>{
    setvalue(e.target.value)
  }
    
  }
  return (value, bind, reset)
}
function UseForm(){
  const[firstName, setFirstName,] = setState('');
  const[lastName, setLastName,] = setState('');
  const [firstName, setFirstName, resetFirstName] = userInut('');
  const [lastName, setLastName, resetLastName] = userInut('');
  
  const submitHandler = e => {
    e.preventDefault();
    resetFirstName()
    resetLastName()
  }
  return(
    <div>
      <form onSubit = {submitHandler}>
      <input type = 'text' {...bindFirstName}/>
         <input type = 'text' {...bindLastName}/>
           <submit type= 'submit'>
      </div>
  )
}
