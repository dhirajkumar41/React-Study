Props - 
class App extends React.Component{
  render(){
    return(
      <div>
        <Greet name='xys' hero = 'gg11'/>
        <Greet name = 'jrjhef' hero='343'/>
      </div>
    );
  }
}
const Greet =(props) =>{
  console.log(props);
  return <h1>hello{props.name}{props.hero}</h1>;
}
ReactDOM.render(
  <App />,
  document.getElementById('root')
);


class App extends React.Component{
  render(){
    return(
      
        <Welcome name='xys' hero = 'gg11'>
          <Welcome name='xys' hero = 'gg11'>
      </div>
    );
  }
}
class welcome extends React.Component{
  render(){
    return <h1>{this.props.name}{this.props.hero}</h1>;
    
  }
}

ReactDOM.render(
  <App />,
  document.getElementById('root')
);


2. class App extends React.Component{
  render(){
    return(
      
        <Welcome name='xys' hero = 'gg11'/>
          <Welcome name='xys' hero = 'gg11'/>
      </div>
    );
  }
}
        
class welcome extends React.Component{
  render(){
    const {name, hero} = this.props;
    //for state
    //const{state1, state2} = this.state;
    return <h1>{name}{hero}</h1>
    
  }
}

ReactDOM.render(
  <App />,
  document.getElementById('root')
);



state-
1. class Welcome extends React.Component {
  constructor(props){
    super(props)
    this.state = ({
      count: 0
    })
  }
  increment(){
    this.setState = (
      {
      count : this.state.count+1
      }, 
      ()=>{
      console.log(this.state.count)
    }
      )
  }
  render() {
    return(
      <div>
      <h1>Count-{this.state.count}</h1>
      <button onClick={()=>this.increment()}>Increment
        </button>
      </div>
    ) 
  }
}

  ReactDOM.render(
    <Welcome />,
    document.getElementById('root')
  );

2. class Welcome extends React.Component {
  constructor(props){
    super(props)
    this.state = ({
      count: 0
    })
  }
  increment(){
    // this.setState = (
    //   {
    //   count : this.state.count+1
    //   }, 
    //   ()=>{
    //   console.log(this.state.count)
    // }
    //   )
}

  ReactDOM.render(
    this.setState((prevState,props) => ({
      count: prevState.count+1
    }))
  }
  incrementFive(){
    this.increment()
    this.increment()
    this.increment()
    this.increment()
    this.increment()
  }
  render() {
    return(
      <div>
      <h1>Count-{this.state.count}</h1>
      <button onClick={()=>this.incrementFive()}>Increment
        </button>
      </div>
    ) 
  }
    <Welcome />,
    document.getElementById('root')
  );


Destructuring props and state

1. class App extends React.Component{
  render(){
    return(
      <div>
        <Greet name='xys' hero = 'gg11'/>
        <Greet name = 'jrjhef' hero='343'/>
      </div>
    );
  }
}
// const Greet = ({name, hero})=>{
//    return <h1>hello{name}{hero}</h1>;
// }
const Greet = props=>{
  const{name, hero} = props;
   return <h1>hello{name}{hero}</h1>;
}

  ReactDOM.render(
    <App/>,
    document.getElementById('root')
  );
2.
class App extends React.Component{
  render(){
    return(
      
        <Welcome name='xys' hero = 'gg11'/>
          <Welcome name='xys' hero = 'gg11'/>
      </div>
    );
  }
}
        
class welcome extends React.Component{
  render(){
    const {name, hero} = this.props;
    //for state
    //const{state1, state2} = this.state;
    return <h1>{name}{hero}</h1>
    
  }
}

ReactDOM.render(
  <App />,
  document.getElementById('root')
);


Event Handling
for function-
class App extends React.Component{
  render(){
    return(
        <ClickEvent />
    );
  }
}
      
function ClickEvent(){
   function ClickHandler(){
    console.log('Button clicked')
  } 
    return (
      <div>
      <button onClick = {ClickHandler}>Click</button>
       </div> 
    )
}

ReactDOM.render(
  <App />,
  document.getElementById('root')
);


for class -
class App extends React.Component{
  render(){
    return(
        <ClickEvent />
    );
  }
}
      
class ClickEvent extends React.Component{
ClickHandler(){
    console.log('Button clicked')
  } 
  render(){
    return (
      <div>
      <button onClick = {this.ClickHandler}>Click</button>
       </div> 
    )
  }
}

ReactDOM.render(
  <App />,
  document.getElementById('root')
);


Binding Event Handlers-
1.binding in render - <button onClick= {this.Clickhandler.bind(this)}>Click</button>
2.Arrow function in render-  <button onClick ={() => this.Clickhandler()}>Click</button>
3.binding in constructor- <button onClick ={this.Clickhandler}>Click</button>
class App extends React.Component{
  render(){
    return(
        <ClickEvent />
    );
  }
}
      
class ClickEvent extends React.Component{
  constructor(props){
    super(props)
    this.state = {
      message:'on see'
    }
    this.Clickhandler = this.Clickhandler.bind(this)
  }
  Clickhandler(){
    this.setState = (
      {
      message : 'hello'
    }
    )
  }
  render(){
    return (
      <div>
        <h1>{this.state.message}</h1>
        <button onClick ={this.Clickhandler}>Click</button>
       </div> 
    )
  }
}

ReactDOM.render(
  <App />,
  document.getElementById('root')
);
4.class properties arrow function-
class App extends React.Component{
  render(){
    return(
        <ClickEvent />
    );
  }
}
      
class ClickEvent extends React.Component{
  constructor(props){
    super(props)
    this.state = {
      message:'on see'
    }
  }
  Clickhandler = () =>{
    this.setState = (
      {
      message : 'hello'
    }
    )
  }
  render(){
    return (
      <div>
        <h1>{this.state.message}</h1>
        <button onClick ={this.Clickhandler}>Click</button>
       </div> 
    )
  }
}

ReactDOM.render(
  <App />,
  document.getElementById('root')
);



Method as Props-
class Parent extends React.Component{
  constructor(props){
    super(props)
    this.state = ({
      parentName : 'Parent'
    })
  this.GreetParent = this.GreetParent.bind(this)
  }
GreetParent(childName){
  alert(childName)
 
}
render(){
  return(
    <Child  GreetParent ={ this.GreetParent} />
  )
}
}
function Child(props){
  return(
    <div>
      <button onClick = {()=> props.GreetParent('child')}>click</button>
      </div>
  )
}
ReactDOM.render(
  <Parent />,
  document.getElementById('root')
);



List Rendering -
function NumberList(props) {
  const numbers = props.numbers;
 const ListItems = numbers.map(number => <li>{number}</li>);
 return (
             <ul>{ListItems}</ul>                    
                              );                             
}

const numbers = [1, 2, 3, 4, 5];
ReactDOM.render(
  <NumberList numbers={numbers} />,
  document.getElementById('root')
);

List and Keys-

function NumberList(props) {
  const numbers = props.numbers;
 const ListItems = numbers.map(number => <li key = {number.id}>{number.name}</li>);
 return (
             <ul>{ListItems}</ul>                    
                              );                             
}

const numbers = [
  {
    id:1,
    name:'aaa'
  },
  {
    id:2,
    name:'bbb'
  },
  {
    id:3,
    name:'ccc'
  }
];
ReactDOM.render(
  <NumberList numbers={numbers} />,
  document.getElementById('root')
);

Index as Key Anti-pattern -
function NumberList(props){
  const number =  props.numbers;
  const Listitems = number.map((num,index)=> <li key = {index}>{index} {num}</li>);
   return <ul>{Listitems}</ul>;
}

const numbers = ['ram','shyam','geeta'];
ReactDOM.render(
  <NumberList number={numbers} />,
  document.getElemenById('root')
);


Styling and CSS Basics - 
1. css stylesheets-
function Stylesheets(){
   return <h1 className='primary'>Stylesheets</h1>;
}


ReactDOM.render(
  <Stylesheets/>,
  document.getElementById('root')
);


function Stylesheets(props){
  let classname = props.name?'primary':'';
  console.log(classname);
   return <h1 className={'${classname} font-xl'}>Stylesheets</h1>;
}


ReactDOM.render(
  <Stylesheets name = 'true'/>,
  document.getElementById('root')
);
css-
.primary{
  color: green;
}
.font-xl{
  font-size: 72px;
}
2.Inline styling-
function InlineStylesheets(props){
   return <h1 style = {props.name}>Stylesheets</h1>;
}

const styesheets = {
  fontSize : '75px',
  color: 'blue'
}
ReactDOM.render(
  <InlineStylesheets name= {styesheets}/>,
  document.getElementById('root')
);


Basics of Form Handling-


class Createforms extends React.Component{
  constructor(props){
    super(props)
    this.state = ({
      UserName : '',
      Comment : ''
    })
  }
  OnEventHandler = (event) => {
    this.setState({
      UserName : event.target.value
    })
  }
   OnCommentEventHandler = (event) => {
    this.setState({
      Comment: event.target.value
    })
  }
  handleSubmit = event =>{
    alert(this.state.UserName)
    event.preventDefault()
  }
render(){
   return (
     <form onSubmit = {this.handleSubmit}>
       <div>
         <label>Username</label>
         <input type='text' value={this.state.UserName} onChange={this.OnEventHandler}/>
         </div>
       <div>
          <label>Comment</label>
         <textarea value = {this.state.comment} onChange={this.OnCommentEventHandler}>
</textarea>         
       </div>
       <button type= 'submit'>Submit</button>
     </form>  
   )
}
}

ReactDOM.render(
  <Createforms/>,
  document.getElementById('root')
);



Component Mounting Lifecycle Methods -
class App extends React.Component{
  render(){
    return(
      <LifeCycle />
    )
  }
}
class LifeCycle React.Component{
  constructor(props){
    super(props)
    this.state = {{
      name : 'Vishwas'
    })
    console.log('constructor');
  }
  static getDerivedStateFromProps(props, state){
console.log('getDerivedStateFromProps');
return null;
  }
  componentDidMount(){
    console.log('componentDidMount')
  }
  render(){
    console.log('render')
    return(
      <div>'Rendering'</div>
    )
  }
}
ReactDOM.render(
  <App/>,
  document.getElementById('root')
);

Fragments- 

syntax - 
<>
</>
Or
<React.Fragment>
</React.Fragment>


class App extends React.Component{
  render(){
    return(
      <div>
        <Fragments />
      </div>
    );
  }
}
function Fragments(){
  return(
    <React.Fragment>
    <h1>Fragments</h1>
    <p>This is fragments demo!</p>
      </React.Fragment>
  )
}
ReactDOM.render(
  <App />,
  document.getElementById('root')
);

pure component - class component

shortcut -rpc

class App extends React.Component{
  render(){
    return(
      <div>
      <Parent />
        </div>
    )
  }
}
class PurComp extends React.PureComponent{
render(){
  return(
    <div>{this.props.name}</div>
  )
}
}




ReactDOM.render(<App />, document.getElementById('root'));


Memo- functional component
function Movie({ title, releaseDate }) {
  return (
    <div>
      <div>Movie title: {title}</div>
      <div>Release date: {releaseDate}</div>
    </div>
  );
}
const MemoizedMovie = React.memo(Movie);

ReactDOM.render(<MemoizedMovie 
  title="Heat"   releaseDate="December 15, 1995" />, document.getElementById('root'));
  
  
Refs-
1.
class App extends React.Component{
  render(){
    return(
      <RefsDemo />
    )
  }
}
class RefsDemo extends React.Component{
  constructor(props){
    super(props)
    this.inputRef = React.createRef()
  }
  componentDidMount(){
     this.inputRef.current.focus()
     console.log(this.inputRef)
  }
  onClickHandler = () =>{
    alert(this.inputRef.current.value)
  }
  render(){
    return(
      <div>
        <input type= 'text' ref = {this.inputRef}/>
        <button onClick = {this.onClickHandler}>click</button>
      </div>
    );
  }
}


ReactDOM.render(<App />, document.getElementById('root'));

2.callback approach-
class App extends React.Component{
  render(){
    return(
      <RefsDemo />
    )
  }
}
class RefsDemo extends React.Component{
  constructor(props){
    super(props)

    this.cbRef = null
    this.setCbRef = element => {
      this.cbRef = element
    }
  }
  componentDidMount(){
     this.cbRef.focus()
  }
  onClickHandler = () =>{
    alert(this.cbRef.value)
  }
  render(){
    return(
      <div>
        <input type= 'text' ref = {this.setCbRef}/>
        <button onClick = {this.onClickHandler}>click</button>
      </div>
    );
  }
}


ReactDOM.render(<App />, document.getElementById('root'));

Refs with Class Components -
class App extends React.Component{
  render(){
    return(
      <focusInput />
    )
  }
}
class Input extends React.Component{
  render(){
    constructor(props){
      super(props)
      this.inputRef = React.createRef()
    }
    focusInput(){
      return(
        this.inputRef.current.focus()
      )
    }
    return(
      <div>
        <input type = 'text' ref={this.inputRef}/>
      </div>
    )
  }
}
class focusInput extends React.Component{
  constructor(props){
      super(props)
      this.componentRef = React.createRef()
    }
  clickHandler = () =>{
 this.componentRef.current.focusInput()
  }
  render(){
    return(
      <div>
        <Input ref = {this.componentRef}/>
        <button onClick ={this.clickHandler}>click</button>
      </div>
    )
  }
}

ReactDOM.render(<App />, document.getElementById('root'));


Forwarding Refs - 
class App extends React.Component{
  render(){
    return(
      <FrParentRef />
    )
  }
}
const FrRef = React.forwardRef((props, ref) => (
  render(){
    return(
      <input type = 'text' ref={ref}/>
    )
  }
));
class FrParentRef extends React.Component{
  constructor(props){
    super(props)
    this.inputRef = React.createRef()
  }
  clickHandler = () => {
    this.inputRef = this.inputRef.current.focus()
  }
  render(){
    return(
      <div>
        <FrRef ref = {this.inputRef}/>
        <button onClick = {this.clickHandler}>Click</button>
        </div>
    )
  }
}

ReactDOM.render(
  <App />,
  document.getElementById('root')
);


2.const FancyButton = React.forwardRef((props, ref)=>
 ( <button ref={ref} className="FancyButton">    {props.children}
  </button>)
);

// You can now get a ref directly to the DOM button:
const ref = React.createRef();
ReactDOM.render(
  <FancyButton ref={ref}>Click me!</FancyButton>,
  document.getElementById('root')
);

Portals- (for modal.tooltip used)
class App extends React.omponent {    
    render () {    
        return (    
            <div>  
         <PortalDemo />  
    </div>    
        );    
    }    
}   

function PortalDemo(){  
    return ReactDOM.createPortal(  
      <h1>Portals Demo</h1>,  
      document.getElementById('portal-root')  
    )  
}  

Higher Order Components (Part 1)-
1.
class ClickHandler extends React.Component{
  constructor(props){
    super(props)
    this.state = ({
      count:0
    })
  }
  increment = () =>{
    this.setState(PrevState =>
      {
      return {count: PrevState.count+1}
    })
  }
  render(){
    return(
      <button onClick = {this.increment}>click {this.state.count}</button>
    )
  }
}
ReactDOM.render(
  <ClickHandler />,
  document.getElementById('root')
);

2.
class OnMouseHandler extends React.Component{
  constructor(props){
    super(props)
    this.state = ({
      count:0
    })
  }
  increment = () => {
    this.state (
       PrevState => {
     return  {count: PrevState.count +1}
    })
  }
  render(){
    return(
      <div>
        <h1 onMouseOver={this.increment}>{this.state}</h1>
      </div>
    )
  }
}
ReactDOM.render(
  <OnMouseHandler />,
  document.getElementById('root')
);
Higher Order Components (Part 2)-share common functionality

const UpdatedComponent = (OriginalComponent) => {
  Class NewComponent extends React.Component{
      constructor(props){
    super(props)
    this.state = ({
      count:0
    })
  }
  increment = () =>{
    this.setState(PrevState =>
      {
      return {count: PrevState.count+1}
    })
  }
    render(){
      return <OriginalComponent count={this.state.count} increment ={this.state.increment}/>
      }
    }
  return NewComponent
  }
class ClickHandler extends React.Component{
  render(){
    return(
      <button onClick = {this.props.increment}>click {this.props.count}</button>
    )
  }
}
export default UpdatedComponent(ClickHandler)
ReactDOM.render(
  <ClickHandler />,
  document.getElementById('root')
);

render props part 1- 
class App extends React.Component{
  render(){
    return(
      <div>
        <Count render={(count, increment) =>
      (<ClickCounter count = {count} increment ={increment}/>)
                      } />
      </div>
    )
  }
}
class ClickCounter extends React.Component{
  
  render(){
    return(
      <button onClick = {this.props.increment}>{this.props.count}</button>
    )
  }
}
class Counter extends React.Component{
  constructor(props){
    super(props)
    this.state: ({
      count: 0
    })
  }
  increment = () => {
    this.setState(
      PrevState =>{
        return {
          count: PrevState.count+1
        }
      }
    ) 
  }
  render(){
    return(
      <div>      {this.props.render(this.state.count,this.increment)}
        </div>
    )
  }
}
ReactDOM.render(
  <App />,
  document.getElementById('root')
);
